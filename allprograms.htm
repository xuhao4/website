
<!-- saved from url=(0036)http://10.26.40.46/tealeaman/Listing -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style type="text/css">td{font-family:courier;font-size:18px}
p{line-height:23.0px;}</style></head><body style="background-color:#ffffee;margin:5px 5px 0px 5px"><table align="left"><tbody><tr><td align="right" style="color:teal" valign="top"><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
185<br>
186<br>
187<br>
188<br>
189<br>
190<br>
</p></td><td align="left" valign="top"><p><nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> Calc</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n1, n2, sum, product;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Enter&nbsp;an&nbsp;integer:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n1 = scanner.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Enter&nbsp;another&nbsp;integer:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n2 = scanner.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = n1 + n2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>product = n1 * n2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"The&nbsp;sum&nbsp;is&nbsp;"</font>+ sum+ <font color="red">",&nbsp;and&nbsp;the&nbsp;product&nbsp;is&nbsp;"</font>+ product);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> RectangleArea</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> length, breadth, area;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Enter&nbsp;length&nbsp;of&nbsp;the&nbsp;rectangle:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>length = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Enter&nbsp;breadth&nbsp;of&nbsp;the&nbsp;rectangle:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>breadth = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>area = length * breadth;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"The&nbsp;area&nbsp;of&nbsp;the&nbsp;rectangle&nbsp;is&nbsp;"</font>+ area);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> StudentInfo</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String name, result;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> age;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> gpa;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color="red">"Please&nbsp;enter&nbsp;student&nbsp;information&nbsp;(Name&nbsp;age&nbsp;GPA)&nbsp;in&nbsp;one&nbsp;line&nbsp;like&nbsp;this:&nbsp;John&nbsp;Smith&nbsp;20&nbsp;3.4:"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>name = scanner.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>name = name + <font color="red">"&nbsp;"</font>+ scanner.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>age = scanner.nextInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>gpa = scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>result = <font color="red">"Student&nbsp;named&nbsp;"</font>+ name + <font color="red">"&nbsp;is&nbsp;"</font>+ age +<font color="red">"&nbsp;years&nbsp;old&nbsp;and&nbsp;has&nbsp;"</font>+ gpa + <font color="red">"&nbsp;GPA"</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(result);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> Remove38</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> String remove38(String x)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String part1 = <font color="red">""</font>, part2 = <font color="red">""</font>, part3 = <font color="red">""</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x.length() &gt; 8)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part2 = x.substring(3,7);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part3 = x.substring(8);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (x.length() == 8)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part2 = x.substring(3,7);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (x.length() &gt; 3)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part2 = x.substring(3);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (x.length() == 3)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x.substring(0,2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>part1 = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> part1 + part2 + part3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color="red">"ab"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color="red">"abc"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color="red">"abcdefgh"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(remove38(<font color="red">"abcdefghi"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.geom.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> FiveStarFlag <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame jFrame = <b>new</b> JFrame(<font color="red">"FiveStarFlag"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.getContentPane().add(new FiveStarFlag(600));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setLocationRelativeTo(null);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> Shape createPentacle(double sx, <b>double</b> sy, <b>double</b> radius, <b>double</b> theta)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>double</b> arc = Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>double</b> rad = Math.sin(Math.PI / 10) / Math.sin(3 * Math.PI / 10);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GeneralPath path = <b>new</b> GeneralPath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.moveTo(1, 0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(rad * Math.cos((1 + 2 * i) * arc), rad * Math.sin((1 + 2 * i) * arc));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(Math.cos(2 * (i + 1) * arc), Math.sin(2 * (i + 1) * arc));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.closePath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>AffineTransform atf = AffineTransform.getScaleInstance(radius, radius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>atf.translate(sx / radius, sy / radius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>atf.rotate(theta);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> atf.createTransformedShape(path);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>int</b> width, height;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> maxR = 0.15, minR = 0.05;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> maxX = 0.25, maxY = 0.25;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> double[] minX =</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0.50, 0.60, 0.60, 0.50</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> double[] minY =</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0.10, 0.20, 0.35, 0.45</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> FiveStarFlag(int width)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.width = width / 3 * 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.height = width / 3 * 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setPreferredSize(new Dimension(this.width, this.height));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Graphics2D graphics2D = (Graphics2D) g;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.setPaint(Color.RED);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fillRect(0, 0, width, height);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> ox = height * maxX, oy = height * maxY;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.setPaint(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fill(createPentacle(ox, oy, height * maxR, -Math.PI / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 4; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sx = minX[i] * height, sy = minY[i] * height;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> theta = Math.atan2(oy - sy, ox - sx);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fill(createPentacle(sx, sy, height * minR, theta));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> FlagDrawingUtils</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> paintstart(int centerx, <b>int</b> centery, <b>int</b> radius, Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angle = 2 * Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] xPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] yPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[2 * i] = (int) (centerx + radius * Math.cos(i * angle));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[2 * i] = (int) (centery - radius * Math.sin(i * angle));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[2 * i + 1] = (int) (centerx + radius / 2 * Math.cos(i * angle + angle / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[2 * i + 1] = (int) (centery - radius / 2 * Math.sin(i * angle + angle / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillPolygon(xPoints, yPoints, 10);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
</p></td></tr></tbody></table>

<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.geom.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> FiveStarFlag <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame jFrame = <b>new</b> JFrame(<font color=red>"FiveStarFlag"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.getContentPane().add(new FiveStarFlag(600));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setLocationRelativeTo(null);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> Shape createPentacle(double sx, <b>double</b> sy, <b>double</b> radius, <b>double</b> theta)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>double</b> arc = Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>double</b> rad = Math.sin(Math.PI / 10) / Math.sin(3 * Math.PI / 10);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GeneralPath path = <b>new</b> GeneralPath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.moveTo(1, 0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(rad * Math.cos((1 + 2 * i) * arc), rad * Math.sin((1 + 2 * i) * arc));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(Math.cos(2 * (i + 1) * arc), Math.sin(2 * (i + 1) * arc));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.closePath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>AffineTransform atf = AffineTransform.getScaleInstance(radius, radius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>atf.translate(sx / radius, sy / radius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>atf.rotate(theta);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> atf.createTransformedShape(path);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>int</b> width, height;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> maxR = 0.15, minR = 0.05;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> maxX = 0.25, maxY = 0.25;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> double[] minX =</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0.50, 0.60, 0.60, 0.50</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> double[] minY =</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0.10, 0.20, 0.35, 0.45</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> FiveStarFlag(int width)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.width = width / 3 * 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.height = width / 3 * 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setPreferredSize(new Dimension(this.width, this.height));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Graphics2D graphics2D = (Graphics2D) g;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.setPaint(Color.RED);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fillRect(0, 0, width, height);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> ox = height * maxX, oy = height * maxY;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.setPaint(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fill(createPentacle(ox, oy, height * maxR, -Math.PI / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 4; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sx = minX[i] * height, sy = minY[i] * height;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> theta = Math.atan2(oy - sy, ox - sx);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fill(createPentacle(sx, sy, height * minR, theta));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> FlagDrawingUtils</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> paintstart(int centerx, <b>int</b> centery, <b>int</b> radius, Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angle = 2 * Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] xPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[] yPoints = <b>new</b> int[10];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[2 * i] = (int) (centerx + radius * Math.cos(i * angle));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[2 * i] = (int) (centery - radius * Math.sin(i * angle));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>xPoints[2 * i + 1] = (int) (centerx + radius / 2 * Math.cos(i * angle + angle / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>yPoints[2 * i + 1] = (int) (centery - radius / 2 * Math.sin(i * angle + angle / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillPolygon(xPoints, yPoints, 10);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.geom.*;</nobr><br>
<nobr><b>public</b> <b>class</b> ChineseFlag <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;the&nbsp;width&nbsp;and&nbsp;height&nbsp;of&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>static</b> <b>final</b> <b>int</b> FLAG_WIDTH = 800;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>final</b> <b>int</b> FLAG_HEIGHT = 480;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Main&nbsp;method&nbsp;to&nbsp;set&nbsp;up&nbsp;the&nbsp;window</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame frame = <b>new</b> JFrame(<font color=red>"Chinese&nbsp;National&nbsp;Flag"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>ChineseFlag panel = <b>new</b> ChineseFlag();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setSize(FLAG_WIDTH, FLAG_HEIGHT);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.add(panel);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Paint&nbsp;method&nbsp;to&nbsp;draw&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super.paintComponent(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Get&nbsp;the&nbsp;graphics&nbsp;object</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>Graphics2D g2d = (Graphics2D) g;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Anti-aliasing&nbsp;for&nbsp;smoother&nbsp;lines</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Set&nbsp;the&nbsp;background&nbsp;to&nbsp;red&nbsp;(the&nbsp;flag's&nbsp;background&nbsp;color)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.setColor(new Color(222, 41, 19));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Red&nbsp;color&nbsp;of&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.fillRect(0, 0, FLAG_WIDTH, FLAG_HEIGHT);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;large&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>g2d.setColor(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStar(g2d, 100, 80, 50, 20, 5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;smaller&nbsp;stars</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>drawSmallStars(g2d);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Method&nbsp;to&nbsp;draw&nbsp;a&nbsp;star&nbsp;at&nbsp;a&nbsp;given&nbsp;position</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> drawStar(Graphics2D g2d, <b>int</b> x, <b>int</b> y, <b>int</b> radius1, <b>int</b> radius2, <b>int</b> numPoints)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;The&nbsp;angle&nbsp;between&nbsp;each&nbsp;point&nbsp;on&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>double</b> angle = Math.PI / numPoints;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Create&nbsp;a&nbsp;polygon&nbsp;representing&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>GeneralPath path = <b>new</b> GeneralPath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;First&nbsp;point&nbsp;of&nbsp;the&nbsp;star</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>path.moveTo(x + Math.cos(0) * radius1, y - Math.sin(0) * radius1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Alternate&nbsp;between&nbsp;outer&nbsp;and&nbsp;inner&nbsp;points</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>for</b> (int i = 1; i &lt; 2 * numPoints; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> currentAngle = i * angle;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> currentRadius = (i % 2 == 0) ? radius1 : radius2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(x + Math.cos(currentAngle) * currentRadius, y - Math.sin(currentAngle) * currentRadius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.closePath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.fill(path);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Draw&nbsp;the&nbsp;smaller&nbsp;stars&nbsp;on&nbsp;the&nbsp;flag</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> drawSmallStars(Graphics2D g2d)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>int[][] positions =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>200, 50</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 100</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>250, 150</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>,</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>200, 200</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Relative&nbsp;positions&nbsp;for&nbsp;the&nbsp;smaller&nbsp;stars</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int[] position : positions)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStar(g2d, position[0], position[1], 20, 8, 5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>class</b> WuJiaoXing <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> WuJiaoXing()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.setSize(800, 800);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> paint(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.RED);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>wujiaoxing(g, 200, 200, 100, <font color=red>"draw"</font>, Color.BLACK);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.BLUE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>wujiaoxing(g, 400, 400, 100, <font color=red>"fill"</font>, Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> wujiaoxing(Graphics g, <b>int</b> x0, <b>int</b> y0, <b>int</b> r, String f, Color color)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> ch = 72 * Math.PI / 180;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x1 = x0, x2 = (int) (x0 - Math.sin(ch) * r), x3 = (int) (x0 + Math.sin(ch) * r),</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>x4 = (int) (x0 - Math.sin(ch / 2) * r), x5 = (int) (x0 + Math.sin(ch / 2) * r);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> y1 = y0 - r, y2 = (int) (y0 - Math.cos(ch) * r), y3 = y2, y4 = (int) (y0 + Math.cos(ch / 2) * r),</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>y5 = y4;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> bx = (int) (x0 + Math.cos(ch) * Math.tan(ch / 2) * r);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> by = y2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Polygon a = <b>new</b> Polygon();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Polygon b = <b>new</b> Polygon();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>a.addPoint(x2, y2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>a.addPoint(x5, y5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>a.addPoint(bx, by);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>b.addPoint(x1, y1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>b.addPoint(bx, by);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>b.addPoint(x3, y3);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>b.addPoint(x4, y4);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(color);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (f.equals(<font color=red>"draw"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawPolygon(a);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawPolygon(b);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (f.equals(<font color=red>"fill"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillPolygon(a);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillPolygon(b);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> g();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>class</b> g <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>WuJiaoXing a = <b>new</b> WuJiaoXing();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> g()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.setSize(800, 800);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setLocation(100, 100);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.add(a);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.geom.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>class</b> FiveStarFlag <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame jFrame = <b>new</b> JFrame(<font color=red>"FiveStarFlag"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.getContentPane().add(new FiveStarFlag(600));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setLocationRelativeTo(null);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jFrame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> Shape createPentacle(double sx, <b>double</b> sy, <b>double</b> radius, <b>double</b> theta)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>double</b> arc = Math.PI / 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>double</b> rad = Math.sin(Math.PI / 10) / Math.sin(3 * Math.PI / 10);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GeneralPath path = <b>new</b> GeneralPath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.moveTo(1, 0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 5; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(rad * Math.cos((1 + 2 * i) * arc), rad * Math.sin((1 + 2 * i) * arc));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(Math.cos(2 * (i + 1) * arc), Math.sin(2 * (i + 1) * arc));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.closePath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>AffineTransform atf = AffineTransform.getScaleInstance(radius, radius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>atf.translate(sx / radius, sy / radius);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>atf.rotate(theta);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> atf.createTransformedShape(path);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>int</b> width, height;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> maxR = 0.15, minR = 0.05;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>double</b> maxX = 0.25, maxY = 0.25;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> double[] minX =</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0.50, 0.60, 0.60, 0.50</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> double[] minY =</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>0.10, 0.20, 0.35, 0.45</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> FiveStarFlag(int width)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.width = width / 3 * 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.height = width / 3 * 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setPreferredSize(new Dimension(this.width, this.height));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Graphics2D graphics2D = (Graphics2D) g;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.setPaint(Color.RED);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fillRect(0, 0, width, height);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> ox = height * maxX, oy = height * maxY;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.setPaint(Color.YELLOW);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fill(createPentacle(ox, oy, height * maxR, -Math.PI / 2));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; 4; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sx = minX[i] * height, sy = minY[i] * height;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> theta = Math.atan2(oy - sy, ox - sx);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>graphics2D.fill(createPentacle(sx, sy, height * minR, theta));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab5
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>class</b> SumNumbers</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Enter&nbsp;numbers&nbsp;separated&nbsp;by&nbsp;spaces&nbsp;(e.g.,&nbsp;1&nbsp;2&nbsp;3):"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (scanner.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (scanner.hasNextDouble())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum += scanner.nextDouble();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"NaN"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>scanner.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"The&nbsp;sum&nbsp;is:&nbsp;"</font>+ sum);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>scanner.close();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab7
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.*;</nobr><br>
<nobr><b>public</b> <b>class</b> Sum</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String [] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> sum = 0.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"&nbsp;"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String name = s.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String ds = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (!ds.equals(<font color=red>"Amount"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> d = Double.parseDouble(ds);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = sum + d;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"&nbsp;"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"sum="</font>+ sum);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>
<script > if(window==parent)window.moveTo(screen.width/2 - 300,3);window.resizeTo(602,screen.height-30);</script></html>

//homework3
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
185<br>
186<br>
187<br>
188<br>
189<br>
190<br>
191<br>
192<br>
193<br>
194<br>
195<br>
196<br>
197<br>
198<br>
199<br>
200<br>
201<br>
202<br>
203<br>
204<br>
205<br>
206<br>
207<br>
208<br>
209<br>
210<br>
211<br>
212<br>
213<br>
214<br>
215<br>
216<br>
217<br>
218<br>
219<br>
220<br>
221<br>
222<br>
223<br>
224<br>
225<br>
226<br>
227<br>
228<br>
229<br>
230<br>
231<br>
232<br>
233<br>
234<br>
235<br>
236<br>
237<br>
238<br>
239<br>
240<br>
241<br>
242<br>
243<br>
244<br>
245<br>
246<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> DataAnalysis</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = <b>new</b> Scanner(System.in);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>StringBuilder storestring = <b>new</b> StringBuilder();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String id, Grade, Score, Absence, Time, Start, Sub, Quiz, Order;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> idsum = 0, Gradesum = 0, Scoresum = 0, Absencesum = 0, Timesum = 0, Startsum = 0, Subsum = 0, Quizsum = 0, Ordersum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> idmean, Grademean, Scoremean, Absencemean, Timemean, Startmean, Submean, Quizmean, Ordermean;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> iddev, Gradedev, Scoredev, Absencedev, Timedev, Startdev, Subdev, Quizdev, Orderdev;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> GradeNum;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (s.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>id = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Grade = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Score = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absence = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Time = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Start = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Sub = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quiz = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(id);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Grade);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Score);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Absence);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Time);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Start);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Sub);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Quiz);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Order = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(Order);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>storestring.append(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (n == 1) continue;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idsum += Double.parseDouble(id);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoresum += Double.parseDouble(Score);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencesum += Double.parseDouble(Absence);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timesum += Double.parseDouble(Time);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startsum += Double.parseDouble(Start);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subsum += Double.parseDouble(Sub);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizsum += Double.parseDouble(Quiz);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordersum += Double.parseDouble(Order);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (Grade.equals(<font color=red>"A"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 4;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (Grade.equals(<font color=red>"B"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (Grade.equals(<font color=red>"C"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (Grade.equals(<font color=red>"D"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradesum += GradeNum;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idmean = idsum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoremean = Scoresum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencemean = Absencesum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timemean = Timesum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startmean = Startsum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Submean = Subsum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizmean = Quizsum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordermean = Ordersum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Grademean = Gradesum / (n - 1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"idmean:&nbsp;"</font>+ idmean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Grademean:&nbsp;"</font>+ Grademean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Scoremean:&nbsp;"</font>+ Scoremean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Absencemean:&nbsp;"</font>+ Absencemean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Timemean:&nbsp;"</font>+ Timemean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Startmean:&nbsp;"</font>+ Startmean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Submean:&nbsp;"</font>+ Submean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Quizmean:&nbsp;"</font>+ Quizmean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Ordermean:&nbsp;"</font>+ Ordermean);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s = <b>new</b> Scanner(storestring.toString().trim());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradesum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoresum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencesum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timesum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizsum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordersum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (s.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>id = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Grade = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Score = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absence = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Time = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Start = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Sub = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quiz = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\n"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Order = s.next().trim();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\t"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>idsum += Math.pow(Double.parseDouble(id) - idmean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (Grade.equals(<font color=red>"A"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 4;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (Grade.equals(<font color=red>"B"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (Grade.equals(<font color=red>"C"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (Grade.equals(<font color=red>"D"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GradeNum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradesum += Math.pow(GradeNum - Grademean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoresum += Math.pow(Double.parseDouble(Score) - Scoremean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencesum += Math.pow(Double.parseDouble(Absence) - Absencemean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timesum += Math.pow(Double.parseDouble(Time) - Timemean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startsum += Math.pow(Double.parseDouble(Start) - Startmean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subsum += Math.pow(Double.parseDouble(Sub) - Submean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizsum += Math.pow(Double.parseDouble(Quiz) - Quizmean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Ordersum += Math.pow(Double.parseDouble(Order) - Ordermean, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>iddev = Math.sqrt(idsum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Gradedev = Math.sqrt(Gradesum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scoredev = Math.sqrt(Scoresum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Absencedev = Math.sqrt(Absencesum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Timedev = Math.sqrt(Timesum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Startdev = Math.sqrt(Startsum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Subdev = Math.sqrt(Subsum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Quizdev = Math.sqrt(Quizsum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Orderdev = Math.sqrt(Ordersum / (n - 1));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"iddev:&nbsp;"</font>+ iddev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Gradedev:&nbsp;"</font>+ Gradedev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Scoredev:&nbsp;"</font>+ Scoredev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Absencedev:&nbsp;"</font>+ Absencedev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Timedev:&nbsp;"</font>+ Timedev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Startdev:&nbsp;"</font>+ Startdev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Subdev:&nbsp;"</font>+ Subdev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Quizdev:&nbsp;"</font>+ Quizdev);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Orderdev:&nbsp;"</font>+ Orderdev);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.geom.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> TurkishFlag <b>extends</b> JPanel</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>SwingUtilities.invokeLater(() -&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JFrame frame = <b>new</b> JFrame(<font color=red>"Turkish&nbsp;National&nbsp;Flag"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.add(new TurkishFlag(800));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setLocationRelativeTo(null);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>frame.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>final</b> <b>int</b> OFFSET = 50;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>final</b> <b>int</b> w, h, G;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> TurkishFlag(int width)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>w = width; h = width * 2 / 3; G = w;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setPreferredSize(new Dimension(w, h));</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Graphics2D g2d = (Graphics2D) g;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.setColor(Color.RED); g2d.fillRect(0, 0, w, h);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> A = G / 2 - OFFSET, B = G / 2, C = (int) (0.0625 * G), D = (int) (0.4 * G);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.setColor(Color.WHITE); g2d.fill(new Ellipse2D.Double(A - B / 2, h / 2 - B / 2, B, B));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.setColor(Color.RED); g2d.fill(new Ellipse2D.Double(A + C - D / 2, h / 2 - D / 2, D, D));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> E = (G / 3) - OFFSET / 2, F = G / 4;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStar(g2d, A + E, h / 2, F / 2);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> drawStar(Graphics2D g2d, <b>double</b> centerX, <b>double</b> centerY, <b>double</b> radius)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> numPoints = 5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angleIncrement = 2 * Math.PI / numPoints;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Path2D path = <b>new</b> Path2D.Double();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 0; i &lt; numPoints; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> angle = i * angleIncrement;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> outerX = centerX + radius * Math.cos(angle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> outerY = centerY + radius * Math.sin(angle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> innerAngle = (i + 0.5) * angleIncrement;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> innerX = centerX + radius / 2 * Math.cos(innerAngle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> innerY = centerY + radius / 2 * Math.sin(innerAngle);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (i == 0) path.moveTo(outerX, outerY); <b>else</b> path.lineTo(outerX, outerY);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.lineTo(innerX, innerY);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path.closePath();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g2d.setColor(Color.WHITE); g2d.fill(path);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab9
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
185<br>
186<br>
187<br>
188<br>
189<br>
190<br>
191<br>
192<br>
193<br>
194<br>
195<br>
196<br>
197<br>
198<br>
199<br>
200<br>
201<br>
202<br>
203<br>
204<br>
205<br>
206<br>
207<br>
208<br>
209<br>
210<br>
211<br>
212<br>
213<br>
214<br>
215<br>
216<br>
217<br>
218<br>
219<br>
220<br>
221<br>
222<br>
223<br>
224<br>
225<br>
226<br>
227<br>
228<br>
229<br>
230<br>
231<br>
232<br>
233<br>
234<br>
235<br>
236<br>
237<br>
238<br>
239<br>
240<br>
241<br>
242<br>
243<br>
244<br>
245<br>
246<br>
247<br>
248<br>
249<br>
250<br>
251<br>
252<br>
253<br>
254<br>
255<br>
256<br>
257<br>
258<br>
259<br>
260<br>
261<br>
262<br>
263<br>
264<br>
265<br>
266<br>
267<br>
268<br>
269<br>
270<br>
271<br>
272<br>
273<br>
274<br>
275<br>
276<br>
277<br>
278<br>
279<br>
280<br>
281<br>
282<br>
283<br>
284<br>
285<br>
286<br>
287<br>
288<br>
289<br>
290<br>
291<br>
292<br>
293<br>
294<br>
295<br>
296<br>
297<br>
298<br>
299<br>
300<br>
301<br>
302<br>
303<br>
304<br>
305<br>
306<br>
307<br>
308<br>
309<br>
310<br>
311<br>
312<br>
313<br>
314<br>
315<br>
316<br>
317<br>
318<br>
319<br>
320<br>
321<br>
322<br>
323<br>
324<br>
325<br>
326<br>
327<br>
328<br>
329<br>
330<br>
331<br>
332<br>
333<br>
</p></td><td  align=left valign=top><p><nobr><font color=green>/*</nobr><br>
<nobr>&nbsp;*&nbsp;Click&nbsp;nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt&nbsp;to&nbsp;change&nbsp;this&nbsp;license</nobr><br>
<nobr>&nbsp;*&nbsp;Click&nbsp;nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java&nbsp;to&nbsp;edit&nbsp;this&nbsp;template</nobr><br>
<nobr>&nbsp;*/</font></nobr><br>
<nobr></nobr><br>
<nobr><font color=green>/**</nobr><br>
<nobr>&nbsp;*</nobr><br>
<nobr>&nbsp;*&nbsp;@author&nbsp;18046</nobr><br>
<nobr>&nbsp;*/</font></nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionEvent;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionListener;</nobr><br>
<nobr><b>import</b> java.util.logging.Level;</nobr><br>
<nobr><b>import</b> java.util.logging.Logger;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> UserEntryForm <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Creates&nbsp;new&nbsp;form&nbsp;UserEntryForm</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> UserEntryForm()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;method&nbsp;is&nbsp;called&nbsp;from&nbsp;within&nbsp;the&nbsp;constructor&nbsp;to&nbsp;initialize&nbsp;the&nbsp;form.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;WARNING:&nbsp;Do&nbsp;NOT&nbsp;modify&nbsp;this&nbsp;code.&nbsp;The&nbsp;content&nbsp;of&nbsp;this&nbsp;method&nbsp;is&nbsp;always</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;regenerated&nbsp;by&nbsp;the&nbsp;Form&nbsp;Editor.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@SuppressWarnings(<font color=red>"unchecked"</font>)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1 = <b>new</b> javax.swing.JMenuBar();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu2 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu3 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu6 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel4 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jPanel1 = <b>new</b> javax.swing.JPanel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel1 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField2 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Country = <b>new</b> javax.swing.JComboBox&lt;&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1 = <b>new</b> javax.swing.JButton();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1 = <b>new</b> javax.swing.JScrollPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1 = <b>new</b> javax.swing.JTextArea();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel2 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel3 = <b>new</b> javax.swing.JLabel();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField3 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField4 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField5 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar2 = <b>new</b> javax.swing.JMenuBar();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu4 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu5 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu7 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem1 = <b>new</b> javax.swing.JMenuItem();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1.setText(<font color=red>"jMenu1"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu2.setText(<font color=red>"File"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1.add(jMenu2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu3.setText(<font color=red>"Edit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1.add(jMenu3);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu6.setText(<font color=red>"jMenu6"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel4.setText(<font color=red>"country"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jLabel1.setText(<font color=red>"User&nbsp;Entry&nbsp;Form"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1.setText(<font color=red>"Name"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField2.setText(<font color=red>"Email"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField2.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField2ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Country.setModel(new javax.swing.DefaultComboBoxModel&lt;&gt;(new String[]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=red>"USA"</font>, <font color=red>"Canada"</font>, <font color=red>"Mexico"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Country.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>CountryActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Submit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setColumns(20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setRows(5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setText(<font color=red>"Address"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1.setViewportView(jTextArea1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField3.setText(<font color=red>"jTextField3"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField4.setText(<font color=red>"jTextField4"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField5.setText(<font color=red>"country"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField5.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField5ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.GroupLayout jPanel1Layout = <b>new</b> javax.swing.GroupLayout(jPanel1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jPanel1.setLayout(jPanel1Layout);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jPanel1Layout.setHorizontalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(17, 17, 17)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(65, 65, 65)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jLabel2)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jLabel3))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(18, 18, 18)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(18, 18, 18)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jLabel1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(296, 296, 296))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jPanel1Layout.setVerticalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(21, 21, 21)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jLabel2)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(18, 18, 18)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jLabel3)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(38, 38, 38)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(42, 42, 42)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jButton1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(50, 50, 50))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu4.setText(<font color=red>"File"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar2.add(jMenu4);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu5.setText(<font color=red>"Edit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar2.add(jMenu5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu7.setText(<font color=red>"File"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem1.setText(<font color=red>"exit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem1.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem1ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu7.add(jMenuItem1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar2.add(jMenu7);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setJMenuBar(jMenuBar2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.GroupLayout layout = <b>new</b> javax.swing.GroupLayout(getContentPane());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>getContentPane().setLayout(layout);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setHorizontalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(27, 27, 27)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setVerticalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(38, 38, 38)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jTextField2ActionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;TODO&nbsp;add&nbsp;your&nbsp;handling&nbsp;code&nbsp;here:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> CountryActionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;TODO&nbsp;add&nbsp;your&nbsp;handling&nbsp;code&nbsp;here:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jButton1ActionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;TODO&nbsp;add&nbsp;your&nbsp;handling&nbsp;code&nbsp;here:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jMenuItem1ActionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;TODO&nbsp;add&nbsp;your&nbsp;handling&nbsp;code&nbsp;here:System.exit(0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>System.exit(0);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jTextField5ActionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;TODO&nbsp;add&nbsp;your&nbsp;handling&nbsp;code&nbsp;here:</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;args&nbsp;the&nbsp;command&nbsp;line&nbsp;arguments</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>/*&nbsp;Set&nbsp;the&nbsp;Nimbus&nbsp;look&nbsp;and&nbsp;feel&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;/*&nbsp;If&nbsp;Nimbus&nbsp;(introduced&nbsp;in&nbsp;Java&nbsp;SE&nbsp;6)&nbsp;is&nbsp;not&nbsp;available,&nbsp;stay&nbsp;with&nbsp;the&nbsp;default&nbsp;look&nbsp;and&nbsp;feel.</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>//&nbsp;&nbsp;*&nbsp;For&nbsp;details&nbsp;see&nbsp;http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>//&nbsp;&nbsp;*/</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (<font color=red>"Nimbus"</font>.equals(info.getName()))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.UIManager.setLookAndFeel(info.getClassName());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (ClassNotFoundException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(UserEntryForm.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (InstantiationException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(UserEntryForm.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IllegalAccessException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(UserEntryForm.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (javax.swing.UnsupportedLookAndFeelException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(UserEntryForm.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;/*&nbsp;Create&nbsp;and&nbsp;display&nbsp;the&nbsp;form&nbsp;*/</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>java.awt.EventQueue.invokeLater(new Runnable()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> UserEntryForm().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Variables&nbsp;declaration&nbsp;-&nbsp;do&nbsp;not&nbsp;modify</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> javax.swing.JComboBox Country;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JButton jButton1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JLabel jLabel4;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu4;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu5;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu6;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu7;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuBar jMenuBar1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuBar jMenuBar2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuItem jMenuItem1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JPanel jPanel1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JScrollPane jScrollPane1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextArea jTextArea1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField3;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField4;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField5;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;End&nbsp;of&nbsp;variables&nbsp;declaration</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab10
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
159<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionEvent;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionListener;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> Personal <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initComponents0()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Container contentPane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.setLayout(new GridBagLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GridBagConstraints c = <b>new</b> GridBagConstraints();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JLabel lblName = <b>new</b> JLabel(<font color=red>"Name"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblName, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JTextField txtName = <b>new</b> JTextField(20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(txtName, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JLabel lblEmail = <b>new</b> JLabel(<font color=red>"Email"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblEmail, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JTextField txtEmali = <b>new</b> JTextField(20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(txtEmali, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JLabel lblCountry = <b>new</b> JLabel(<font color=red>"Country"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblCountry, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JComboBox cmdCountry = <b>new</b> JComboBox();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(cmdCountry, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>cmdCountry.setModel(new javax.swing.DefaultComboBoxModel&lt;&gt;(new String[]</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=red>"USA"</font>, <font color=red>"Canada"</font>, <font color=red>"Mexico"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JLabel lblAddress = <b>new</b> JLabel(<font color=red>"Address"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(lblAddress, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JTextArea tarAddress = <b>new</b> JTextArea();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 3;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(tarAddress, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>JButton btnSubmit = <b>new</b> JButton(<font color=red>"Submit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridheight = 2;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor = GridBagConstraints.NORTHWEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.fill = GridBagConstraints.HORIZONTAL;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = 4;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> Insets(1, 3, 2, 2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipadx = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.ipady = 1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(btnSubmit, c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//lblName.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Creates&nbsp;new&nbsp;form&nbsp;Personal</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Personal()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents0();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//exercise4
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
185<br>
186<br>
187<br>
188<br>
189<br>
190<br>
191<br>
192<br>
193<br>
194<br>
195<br>
196<br>
197<br>
198<br>
199<br>
200<br>
201<br>
202<br>
203<br>
204<br>
205<br>
206<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.File;</nobr><br>
<nobr><b>import</b> java.io.FileWriter;</nobr><br>
<nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr><b>import</b> javax.swing.JOptionPane;</nobr><br>
<nobr></nobr><br>
<nobr><font color=green>/*</nobr><br>
<nobr>*&nbsp;Click&nbsp;nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt&nbsp;to&nbsp;change&nbsp;this&nbsp;license</nobr><br>
<nobr>*&nbsp;Click&nbsp;nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java&nbsp;to&nbsp;edit&nbsp;this&nbsp;template</nobr><br>
<nobr>*/</font></nobr><br>
<nobr></nobr><br>
<nobr><font color=green>/**</nobr><br>
<nobr>*</nobr><br>
<nobr>*&nbsp;@author&nbsp;18046</nobr><br>
<nobr>*/</font></nobr><br>
<nobr><b>public</b> <b>class</b> Eternal <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Creates&nbsp;new&nbsp;form&nbsp;Eternal</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Eternal()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;method&nbsp;is&nbsp;called&nbsp;from&nbsp;within&nbsp;the&nbsp;constructor&nbsp;to&nbsp;initialize&nbsp;the&nbsp;form.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;WARNING:&nbsp;Do&nbsp;NOT&nbsp;modify&nbsp;this&nbsp;code.&nbsp;The&nbsp;content&nbsp;of&nbsp;this&nbsp;method&nbsp;is&nbsp;always</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;regenerated&nbsp;by&nbsp;the&nbsp;Form&nbsp;Editor.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@SuppressWarnings(<font color=red>"unchecked"</font>)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;&lt;editor-fold&nbsp;defaultstate="collapsed"&nbsp;desc="Generated&nbsp;Code"&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1 = <b>new</b> javax.swing.JScrollPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1 = <b>new</b> javax.swing.JTextArea();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1 = <b>new</b> javax.swing.JMenuBar();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Save = <b>new</b> javax.swing.JMenuItem();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem2 = <b>new</b> javax.swing.JMenuItem();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu2 = <b>new</b> javax.swing.JMenu();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setColumns(20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setRows(5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1.setViewportView(jTextArea1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1.setText(<font color=red>"File"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Save.setText(<font color=red>"Save"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Save.addActionListener(new java.awt.event.ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>SaveActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1.add(Save);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem2.setText(<font color=red>"Open"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem2.addActionListener(new java.awt.event.ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuItem2ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu1.add(jMenuItem2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1.add(jMenu1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenu2.setText(<font color=red>"Edit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jMenuBar1.add(jMenu2);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setJMenuBar(jMenuBar1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.GroupLayout layout = <b>new</b> javax.swing.GroupLayout(getContentPane());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>getContentPane().setLayout(layout);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setHorizontalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap(14, Short.MAX_VALUE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setVerticalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(27, 27, 27)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap(39, Short.MAX_VALUE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;&lt;/editor-fold&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> <b>void</b> SaveActionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Save();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Open();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>String path;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> Open()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>path = JOptionPane.showInputDialog(this, <font color=red>"abc"</font>, <font color=red>"File&nbsp;path"</font>, JOptionPane.OK_CANCEL_OPTION);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (path == null) return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner s = null;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s = <b>new</b> Scanner(new File(path));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"wrong&nbsp;path"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.useDelimiter(<font color=red>"\\Z"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String t = s.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setText(t);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> Save()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>try</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>FileWriter f = <b>new</b> FileWriter(path, false);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String t = jTextArea1.getText();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.write(t);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>f.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>catch(Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(e.toString());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;args&nbsp;the&nbsp;command&nbsp;line&nbsp;arguments</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>/*&nbsp;Set&nbsp;the&nbsp;Nimbus&nbsp;look&nbsp;and&nbsp;feel&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&lt;editor-fold&nbsp;defaultstate="collapsed"&nbsp;desc="&nbsp;Look&nbsp;and&nbsp;feel&nbsp;setting&nbsp;code&nbsp;(optional)&nbsp;"&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>/*&nbsp;If&nbsp;Nimbus&nbsp;(introduced&nbsp;in&nbsp;Java&nbsp;SE&nbsp;6)&nbsp;is&nbsp;not&nbsp;available,&nbsp;stay&nbsp;with&nbsp;the&nbsp;default&nbsp;look&nbsp;and&nbsp;feel.</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;For&nbsp;details&nbsp;see&nbsp;http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (<font color=red>"Nimbus"</font>.equals(info.getName()))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.UIManager.setLookAndFeel(info.getClassName());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (ClassNotFoundException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(Eternal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (InstantiationException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(Eternal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IllegalAccessException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(Eternal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (javax.swing.UnsupportedLookAndFeelException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.util.logging.Logger.getLogger(Eternal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&lt;/editor-fold&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>/*&nbsp;Create&nbsp;and&nbsp;display&nbsp;the&nbsp;form&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.awt.EventQueue.invokeLater(new Runnable()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Eternal().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Variables&nbsp;declaration&nbsp;-&nbsp;do&nbsp;not&nbsp;modify&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> javax.swing.JMenuItem Save;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenu jMenu2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuBar jMenuBar1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JMenuItem jMenuItem2;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JScrollPane jScrollPane1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextArea jTextArea1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;End&nbsp;of&nbsp;variables&nbsp;declaration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//homework5
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.File;</nobr><br>
<nobr><b>import</b> java.util.Scanner;</nobr><br>
<nobr></nobr><br>
<nobr><b>class</b> DataProcessor</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Scanner scanner = <b>new</b> Scanner(new File(args[0]));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> n;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> row = -1, col = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>float</b> sum;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String grades = <font color=red>"FDCBA"</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String[] headings = <b>new</b> String[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>float[][] nums = <b>new</b> float[48][];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>float[] means = <b>new</b> float[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>float[] stdvs = <b>new</b> float[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Scanning&nbsp;loop</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>while</b> (scanner.hasNext())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (col == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (row &gt;= 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>nums[row] = <b>new</b> float[9];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (row == -1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>headings[col] = scanner.next();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (col == 1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>nums[row][col] = grades.indexOf(scanner.next());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>nums[row][col] = scanner.nextFloat();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>col++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (col == 9)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>col = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>row++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>scanner.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>n = row;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (col = 0; col &lt; 9; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (row = 0; row &lt; n; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum += nums[row][col];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>means[col] = sum / n;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (col = 0; col &lt; 9; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (row = 0; row &lt; n; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sum += (nums[row][col] - means[col]) * (nums[row][col] - means[col]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>stdvs[col] = (float) Math.sqrt(sum / n);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String[] outputTitles =</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=red>"id"</font>, <font color=red>"Grade"</font>, <font color=red>"Score"</font>, <font color=red>"Absence"</font>, <font color=red>"Time"</font>, <font color=red>"Start"</font>, <font color=red>"Sub"</font>, <font color=red>"Quiz"</font>, <font color=red>"Order"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (col = 0; col &lt; 9; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Mean&nbsp;of&nbsp;"</font>+ outputTitles[col] + <font color=red>":&nbsp;"</font>+ means[col]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (col = 0; col &lt; 9; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"Stdv&nbsp;of&nbsp;"</font>+ outputTitles[col] + <font color=red>":&nbsp;"</font>+ stdvs[col]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab12
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
</p></td><td  align=left valign=top><p><nobr><b>package</b> Source;</nobr><br>
<nobr><b>import</b> java.awt.Color;</nobr><br>
<nobr><b>import</b> java.awt.Container;</nobr><br>
<nobr><b>import</b> java.awt.Dimension;</nobr><br>
<nobr><b>import</b> java.awt.Graphics;</nobr><br>
<nobr><b>import</b> java.awt.GridBagConstraints;</nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>public</b> <b>class</b> GoGame <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblmyip=new JLabel(<font color=red>"My&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblpip=new JLabel(<font color=red>"Partner&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JLabel lblmycolor=new JLabel(<font color=red>"My&nbsp;Color"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextField txtmyip=new JTextField(<font color=red>"192.168.111.222"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JTextField txtpip=new JTextField(<font color=red>"192.168.111.101"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JButton btns=new JButton(<font color=red>"Start"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> width=600;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>int</b> N=19;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color bgcolor=Color.ORANGE;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color[][]colors=new Color[N][];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JPanel board=new JPanel()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>void</b> paintGrid(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>cellSize=width/N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>width=cellSize*N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(Color.BLACK);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>for(int row=1;row&lt;=N;row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(cellSize,row*cellSize,width,row*cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>for(int col=1;col&lt;=N;col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(col*cellSize,cellSize,col*cellSize,width);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintGrid(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//paintStones(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> place(JComponent c,int x,int y)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GridBagConstraints g=new GridBagConstraints();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.gridx=x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.gridy=y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>if(y==1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.gridwidth=6;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> g.gridwidth=1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>if(x%2==0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.anchor=GridBagConstraints.EAST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.anchor=GridBagConstraints.WEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>if(y==1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fill=GridBagConstraints.BOTH;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.weightx=1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.weighty=1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.weightx=0.5;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.add(c,g);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Container contentPane=getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentPane.setLayout(new java.awt.GridBagLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmyip,0,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtmyip,1,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblpip,2,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtpip,3,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmycolor,4,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(btns,5,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(board,0,1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setBackground(bgcolor);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setPreferredSize(new Dimension(width+4*cellSize,width+4*cellSize));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//setSize(width+cellSize,width+cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> GoGame()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[]args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GoGame g=new GoGame();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab13
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
</p></td><td  align=left valign=top><p><nobr><b>package</b> Source;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> GoGame <b>extends</b> JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>final</b> <b>int</b> N = 19;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JLabel lblmyip = <b>new</b> JLabel(<font color=red>"My&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JLabel lblpip = <b>new</b> JLabel(<font color=red>"Partner&nbsp;IP"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JTextField txtmyip = <b>new</b> JTextField(<font color=red>"172.20.10.4"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JTextField txtpip = <b>new</b>  JTextField(<font color=red>"172.20.10.10"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JButton btnStart= <b>new</b> JButton(<font color=red>"Listen"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> JLabel lblmycolor = <b>new</b> JLabel(<font color=red>"Black"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Container contentpane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color [][] colors = <b>new</b> Color[N][];</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>JPanel board = <b>new</b> JPanel()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> paintComponent(Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>super.paintComponent(g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>paintGrid(width, g);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row=0; row &lt; N; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col=0;col&lt; N; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (colors[row] [col] != null)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(colors[row][col]);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (colors[row][col] != Color.ORANGE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.fillOval((int)((0.65+col)*cellSize),(int)((0.63+row)*cellSize), 3*cellSize/4,  3*cellSize/4 );</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>int</b> width = 500;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> GoGame()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b>  <b>void</b> paintGrid(int w, Graphics g)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>cellSize = width/N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>width  = N * cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.setColor(java.awt.Color.BLACK);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row = 1; row &lt;= N; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(cellSize, row * cellSize, width,  row * cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 1; col &lt;= N; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>g.drawLine(col * cellSize, cellSize, col * cellSize, width);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> place(JComponent e, <b>int</b> x, <b>int</b> y)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>GridBagConstraints c = <b>new</b> GridBagConstraints();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridx = x;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridy = y;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.gridwidth = (y == 0?1:6);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weightx = 1.0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.weighty = (y==0?0.0:1.0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (y == 1 || x%2==1) c.fill = GridBagConstraints.BOTH;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.anchor =  x%2==0? GridBagConstraints.EAST: GridBagConstraints.WEST;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>c.insets = <b>new</b> java.awt.Insets(3, 3, 0, 0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentpane.add(e, c);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@SuppressWarnings(<font color=red>"unchecked"</font>)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i=0; i &lt; N; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors[i] = <b>new</b> Color[N];</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int j=0; j &lt; N; j++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors[i][j] = Color.ORANGE;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.awt.GridBagConstraints c;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Container contentpane = getContentPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>contentpane.setLayout(new java.awt.GridBagLayout());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmyip,0,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtmyip,1,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblpip,2,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(txtpip,3,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(lblmycolor,4,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(btnStart,5,0);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setSize(width+2*cellSize, width+2*cellSize);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>place(board,0,1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setSize((int)(width*1.09), (int)(width*1.18));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setMinimumSize(new java.awt.Dimension((int)(width*1.08), (int)(width*1.18)));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.setBackground(Color.GREEN);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.addMouseListener(new java.awt.event.MouseAdapter()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> mouseClicked(java.awt.event.MouseEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (state == State.listening)return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x0 = board.getX();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> y0 = board.getY();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x = (evt.getX()- x0)/cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> y = (evt.getY()- y0 + cellSize)/cellSize;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (y &lt; 0) y = 0; <b>if</b> (y&gt;=N) y = N-1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x &lt; 0) x = 0; <b>if</b> (x&gt;=N) x = N-1;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStone(x,y,mycolor);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.sendnum(x, y, txtpip.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = State.listening;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>btnStart.addActionListener(new java.awt.event.ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(java.awt.event.ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>if(state == State.init)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.receive(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>mycolor = Color.WHITE;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (state == State.init.listening)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>quit();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.sendnum(-1, 0, txtpip.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> drawStone(int x, <b>int</b> y, Color cl)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>colors[y][x] = cl;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>board.repaint();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Color mycolor = Color.BLACK;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>Dialogs comm = <b>new</b> Dialogs()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> handlenum(int r, <b>int</b> c)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (r==-1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = State.init; return;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>drawStone(r,c, mycolor==Color.WHITE?Color.BLACK:Color.WHITE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>state = State.thinking;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>enum State</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>init, listening, thinking</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>State state = State.init;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> quit()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>comm.sendnum(-1, 0, <font color=red>"127.0.0.1"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>java.awt.EventQueue.invokeLater(new Runnable()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> GoGame().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//homework6
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.io.*;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> Main</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>FileReader r = <b>new</b> FileReader(<font color=red>"Main.java"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> x = r.read();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (x != -1 && x &lt; 100)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (x != -1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(x);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"End&nbsp;of&nbsp;file&nbsp;reached"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>r.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IOException e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>System.out.println(<font color=red>"An&nbsp;error&nbsp;occurred:&nbsp;"</font>+ e.getMessage());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab17
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
143<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
158<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
</p></td><td  align=left valign=top><p><nobr><b>import</b> java.util.concurrent.atomic.AtomicBoolean;</nobr><br>
<nobr><b>import</b> javax.swing.*;</nobr><br>
<nobr><b>import</b> java.awt.*;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionEvent;</nobr><br>
<nobr><b>import</b> java.awt.event.ActionListener;</nobr><br>
<nobr><b>import</b> java.util.logging.Level;</nobr><br>
<nobr><b>import</b> java.util.logging.Logger;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> Factoring <b>extends</b> javax.swing.JFrame</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> AtomicBoolean done = <b>new</b> AtomicBoolean(false);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Creates&nbsp;new&nbsp;form&nbsp;Factoring</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Factoring()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>initComponents();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1.setText(<font color=red>""</font>+ Long.MAX_VALUE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Start"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;method&nbsp;is&nbsp;called&nbsp;from&nbsp;within&nbsp;the&nbsp;constructor&nbsp;to&nbsp;initialize&nbsp;the&nbsp;form.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;WARNING:&nbsp;Do&nbsp;NOT&nbsp;modify&nbsp;this&nbsp;code.&nbsp;The&nbsp;content&nbsp;of&nbsp;this&nbsp;method&nbsp;is&nbsp;always</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;regenerated&nbsp;by&nbsp;the&nbsp;Form&nbsp;Editor.</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>@SuppressWarnings(<font color=red>"unchecked"</font>)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> initComponents()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1 = <b>new</b> javax.swing.JButton();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1 = <b>new</b> javax.swing.JScrollPane();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1 = <b>new</b> javax.swing.JTextArea();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1 = <b>new</b> javax.swing.JTextField();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"jButton1"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.addActionListener(new ActionListener()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> actionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1ActionPerformed(evt);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setColumns(20);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.setRows(5);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jScrollPane1.setViewportView(jTextArea1);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextField1.setText(<font color=red>"jTextField1"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>javax.swing.GroupLayout layout = <b>new</b> javax.swing.GroupLayout(getContentPane());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>getContentPane().setLayout(layout);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setHorizontalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(149, 149, 149)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(232, 232, 232))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(29, 29, 29)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.setVerticalGroup(</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jButton1)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addGap(38, 38, 38)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.addContainerGap(22, Short.MAX_VALUE))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pack();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>void</b> task()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>long</b> n = Long.parseLong(jTextField1.getText());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> k = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int i = 2; i &lt;= Math.sqrt(n) + 1; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (done.get() == true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (n % i == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>k++;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jTextArea1.append(i + (k % 10 == 0? <font color=red>"\n"</font>: <font color=red>",&nbsp;"</font>));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>void</b> jButton1ActionPerformed(ActionEvent evt)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String face = jButton1.getText();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (face.equals(<font color=red>"Start"</font>))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Thread()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>task();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>.start();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Quit"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>done.set(false);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>done.set(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>jButton1.setText(<font color=red>"Start"</font>);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>/**</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;args&nbsp;the&nbsp;command&nbsp;line&nbsp;arguments</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String args[])</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>/*&nbsp;Set&nbsp;the&nbsp;Nimbus&nbsp;look&nbsp;and&nbsp;feel&nbsp;*/</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;/*&nbsp;If&nbsp;Nimbus&nbsp;(introduced&nbsp;in&nbsp;Java&nbsp;SE&nbsp;6)&nbsp;is&nbsp;not&nbsp;available,&nbsp;stay&nbsp;with&nbsp;the&nbsp;default&nbsp;look&nbsp;and&nbsp;feel.</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>//&nbsp;&nbsp;*&nbsp;For&nbsp;details&nbsp;see&nbsp;http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><font color=green>//&nbsp;&nbsp;*/</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (<font color=red>"Nimbus"</font>.equals(info.getName()))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>UIManager.setLookAndFeel(info.getClassName());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>break;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (ClassNotFoundException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(Factoring.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (InstantiationException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(Factoring.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (IllegalAccessException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(Factoring.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (UnsupportedLookAndFeelException ex)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Logger.getLogger(Factoring.class.getName()).log(Level.SEVERE, null, ex);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;/*&nbsp;Create&nbsp;and&nbsp;display&nbsp;the&nbsp;form&nbsp;*/</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></font>EventQueue.invokeLater(new Runnable()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Factoring().setVisible(true);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;Variables&nbsp;declaration&nbsp;-&nbsp;do&nbsp;not&nbsp;modify</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font><b>private</b> javax.swing.JButton jButton1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JScrollPane jScrollPane1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextArea jTextArea1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> javax.swing.JTextField jTextField1;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><font color=green>//&nbsp;End&nbsp;of&nbsp;variables&nbsp;declaration</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></font></nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>

//lab19
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
71<br>
72<br>
73<br>
74<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
84<br>
85<br>
86<br>
87<br>
88<br>
89<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
108<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
133<br>
134<br>
135<br>
136<br>
137<br>
138<br>
139<br>
140<br>
141<br>
142<br>
144<br>
145<br>
146<br>
147<br>
148<br>
149<br>
150<br>
151<br>
152<br>
153<br>
154<br>
155<br>
156<br>
157<br>
159<br>
160<br>
161<br>
162<br>
163<br>
164<br>
165<br>
166<br>
167<br>
168<br>
169<br>
170<br>
171<br>
172<br>
173<br>
174<br>
175<br>
176<br>
177<br>
178<br>
179<br>
180<br>
181<br>
182<br>
183<br>
184<br>
185<br>
186<br>
187<br>
188<br>
189<br>
190<br>
191<br>
192<br>
193<br>
194<br>
195<br>
196<br>
197<br>
198<br>
199<br>
200<br>
201<br>
202<br>
203<br>
204<br>
205<br>
206<br>
207<br>
208<br>
209<br>
210<br>
211<br>
212<br>
213<br>
214<br>
215<br>
216<br>
217<br>
218<br>
219<br>
220<br>
221<br>
222<br>
223<br>
224<br>
225<br>
226<br>
227<br>
228<br>
229<br>
230<br>
231<br>
</p></td><td  align=left valign=top><p><nobr>1,<font color=#FF00CC>'import java.net.DatagramPacket;</nobr><br>
<nobr>import java.net.DatagramSocket;</nobr><br>
<nobr>import java.net.InetAddress;</nobr><br>
<nobr></nobr><br>
<nobr>public class UDPChat extends javax.swing.JFrame {</nobr><br>
<nobr></nobr><br>
<nobr>/**</nobr><br>
<nobr>* Creates new form UDPChat</nobr><br>
<nobr>*/</nobr><br>
<nobr>public UDPChat() {</nobr><br>
<nobr>initComponents();</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>/**</nobr><br>
<nobr>* This method is called from within the constructor to initialize the form.</nobr><br>
<nobr>* WARNING: Do NOT modify this code. The content of this method is always</nobr><br>
<nobr>* regenerated by the Form Editor.</nobr><br>
<nobr>*/</nobr><br>
<nobr>@SuppressWarnings("unchecked")</nobr><br>
<nobr>// &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;</nobr><br>
<nobr>private void initComponents() {</nobr><br>
<nobr></nobr><br>
<nobr>jTextField1 = new javax.swing.JTextField();</nobr><br>
<nobr>jButton1 = new javax.swing.JButton();</nobr><br>
<nobr>jScrollPane1 = new javax.swing.JScrollPane();</nobr><br>
<nobr>jTextArea1 = new javax.swing.JTextArea();</nobr><br>
<nobr>jScrollPane2 = new javax.swing.JScrollPane();</nobr><br>
<nobr>jTextArea2 = new javax.swing.JTextArea();</nobr><br>
<nobr></nobr><br>
<nobr>setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</nobr><br>
<nobr></nobr><br>
<nobr>jTextField1.setText("10.25.40.45");</nobr><br>
<nobr></nobr><br>
<nobr>jButton1.setText("Send");</nobr><br>
<nobr>jButton1.addActionListener(new java.awt.event.ActionListener() {</nobr><br>
<nobr>public void actionPerformed(java.awt.event.ActionEvent evt) {</nobr><br>
<nobr>jButton1ActionPerformed(evt);</nobr><br>
<nobr>}</nobr><br>
<nobr>});</nobr><br>
<nobr></nobr><br>
<nobr>jTextArea1.setColumns(20);</nobr><br>
<nobr>jTextArea1.setRows(5);</nobr><br>
<nobr>jScrollPane1.setViewportView(jTextArea1);</nobr><br>
<nobr></nobr><br>
<nobr>jTextArea2.setColumns(20);</nobr><br>
<nobr>jTextArea2.setRows(5);</nobr><br>
<nobr>jScrollPane2.setViewportView(jTextArea2);</nobr><br>
<nobr></nobr><br>
<nobr>javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());</nobr><br>
<nobr>getContentPane().setLayout(layout);</nobr><br>
<nobr>layout.setHorizontalGroup(</nobr><br>
<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
<nobr>.addGap(51, 51, 51)</nobr><br>
<nobr>.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
<nobr>.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)</nobr><br>
<nobr>.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
<nobr>.addGap(273, 273, 273))</nobr><br>
<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
<nobr>.addContainerGap()</nobr><br>
<nobr>.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)</nobr><br>
<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)</nobr><br>
<nobr>.addComponent(jScrollPane2))</nobr><br>
<nobr>.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))</nobr><br>
<nobr>);</nobr><br>
<nobr>layout.setVerticalGroup(</nobr><br>
<nobr>layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</nobr><br>
<nobr>.addGroup(layout.createSequentialGroup()</nobr><br>
<nobr>.addGap(35, 35, 35)</nobr><br>
<nobr>.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)</nobr><br>
<nobr>.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
<nobr>.addComponent(jButton1))</nobr><br>
<nobr>.addGap(45, 45, 45)</nobr><br>
<nobr>.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)</nobr><br>
<nobr>.addGap(18, 18, 18)</nobr><br>
<nobr>.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)</nobr><br>
<nobr>.addContainerGap())</nobr><br>
<nobr>);</nobr><br>
<nobr></nobr><br>
<nobr>pack();</nobr><br>
<nobr>}// &lt;/editor-fold&gt;</nobr><br>
<nobr>private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {</nobr><br>
<nobr>String message = jTextArea2.getText();try{</nobr><br>
<nobr>DatagramSocket s = new DatagramSocket();</nobr><br>
<nobr>InetAddress addr = InetAddress.getByName(jTextField1.getText());</nobr><br>
<nobr>byte [] bs = message.getBytes();</nobr><br>
<nobr>DatagramPacket p = new DatagramPacket(bs,bs.length,addr,30000);</nobr><br>
<nobr>s.send(p);</nobr><br>
<nobr></nobr><br>
<nobr>}</nobr><br>
<nobr>catch(Exception e){}</nobr><br>
<nobr></nobr><br>
<nobr>}</nobr><br>
<nobr>private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {</nobr><br>
<nobr>// TODO add your handling code here:</nobr><br>
<nobr>}</nobr><br>
<nobr>void recev()</nobr><br>
<nobr>{</nobr><br>
<nobr>int K = 1024;//2^10</nobr><br>
<nobr>try{</nobr><br>
<nobr>DatagramSocket s = new DatagramSocket(30000);</nobr><br>
<nobr>byte [] buf = new byte[K];</nobr><br>
<nobr>DatagramPacket p = new DatagramPacket(buf,K);</nobr><br>
<nobr>while(true)</nobr><br>
<nobr>{</nobr><br>
<nobr>s.receive(p);</nobr><br>
<nobr>String message = new String(p.getData(),0,p.getLength());</nobr><br>
<nobr>InetAddress addr = p.getAddress();</nobr><br>
<nobr>jTextArea1.append(addr.toString() + ":");</nobr><br>
<nobr>jTextArea1.append(message + "\n");</nobr><br>
<nobr>}</nobr><br>
<nobr>}catch(Exception e){}</nobr><br>
<nobr></nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>/**</nobr><br>
<nobr>* @param args the command line arguments</nobr><br>
<nobr>*/</nobr><br>
<nobr>public static void main(String args[]) {</nobr><br>
<nobr>/* Set the Nimbus look and feel */</nobr><br>
<nobr>//&lt;editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) "&gt;</nobr><br>
<nobr>/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.</nobr><br>
<nobr>* For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html</nobr><br>
<nobr>*/</nobr><br>
<nobr>try {</nobr><br>
<nobr>for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {</nobr><br>
<nobr>if ("Nimbus".equals(info.getName())) {</nobr><br>
<nobr>javax.swing.UIManager.setLookAndFeel(info.getClassName());</nobr><br>
<nobr>break;</nobr><br>
<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr>} catch (ClassNotFoundException ex) {</nobr><br>
<nobr>java.util.logging.Logger.getLogger(UDPChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
<nobr>} catch (InstantiationException ex) {</nobr><br>
<nobr>java.util.logging.Logger.getLogger(UDPChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
<nobr>} catch (IllegalAccessException ex) {</nobr><br>
<nobr>java.util.logging.Logger.getLogger(UDPChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
<nobr>} catch (javax.swing.UnsupportedLookAndFeelException ex) {</nobr><br>
<nobr>java.util.logging.Logger.getLogger(UDPChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>/* Create and display the form */</nobr><br>
<nobr>java.awt.EventQueue.invokeLater(new Runnable() {</nobr><br>
<nobr>public void run() {</nobr><br>
<nobr>UDPChat u = new UDPChat();</nobr><br>
<nobr>new Thread(){public void run()</nobr><br>
<nobr>{</nobr><br>
<nobr>u.recev();</nobr><br>
<nobr>}}.start();</nobr><br>
<nobr></nobr><br>
<nobr>new UDPChat().setVisible(true);</nobr><br>
<nobr>}</nobr><br>
<nobr>});</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>private javax.swing.JButton jButton1;</nobr><br>
<nobr>private javax.swing.JScrollPane jScrollPane1;</nobr><br>
<nobr>private javax.swing.JScrollPane jScrollPane2;</nobr><br>
<nobr>private javax.swing.JTextArea jTextArea1;</nobr><br>
<nobr>private javax.swing.JTextArea jTextArea2;</nobr><br>
<nobr>private javax.swing.JTextField jTextField1;</nobr><br>
<nobr>}'</font>,8,1,1,-1</nobr><br>
<nobr>2,<font color=#FF00CC>'package Source;</nobr><br>
<nobr>import java.io.*;</nobr><br>
<nobr>import java.net.*;</nobr><br>
<nobr>import java.util.*;</nobr><br>
<nobr></nobr><br>
<nobr>public class SimpleHTTPServer {</nobr><br>
<nobr>private ServerSocket serverSocket;</nobr><br>
<nobr>private final int port;</nobr><br>
<nobr></nobr><br>
<nobr>public SimpleHTTPServer(int port) {</nobr><br>
<nobr>this.port = port;</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>public void start() {</nobr><br>
<nobr>try {</nobr><br>
<nobr>serverSocket = new ServerSocket(port);</nobr><br>
<nobr>System.out.println("Server started on port " + port);</nobr><br>
<nobr>while (true) {</nobr><br>
<nobr>Socket clientSocket = serverSocket.accept();</nobr><br>
<nobr>Thread thread = new Thread(() -&gt; handleClient(clientSocket));</nobr><br>
<nobr>thread.start();</nobr><br>
<nobr>}</nobr><br>
<nobr>} catch (IOException e) {</nobr><br>
<nobr>e.printStackTrace();</nobr><br>
<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>private void handleClient(Socket clientSocket) {</nobr><br>
<nobr>try {</nobr><br>
<nobr>BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));</nobr><br>
<nobr>DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());</nobr><br>
<nobr></nobr><br>
<nobr>Map&lt;String, String&gt; headers = readHeaders(in);</nobr><br>
<nobr>System.out.println(headers);</nobr><br>
<nobr></nobr><br>
<nobr>String response = "HTTP/1.1 200 OK\r\n"</nobr><br>
<nobr>+ "Content-Type: text/plain\r\n"</nobr><br>
<nobr>+ "\r\n"</nobr><br>
<nobr>+ "request received";</nobr><br>
<nobr>out.writeBytes(response);</nobr><br>
<nobr></nobr><br>
<nobr>in.close();</nobr><br>
<nobr>out.close();</nobr><br>
<nobr>clientSocket.close();</nobr><br>
<nobr>} catch (IOException e) {</nobr><br>
<nobr>e.printStackTrace();</nobr><br>
<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr>private Map readHeaders(BufferedReader in) throws IOException {</nobr><br>
<nobr>Map headers = new HashMap&lt;&gt;();</nobr><br>
<nobr>String line;</nobr><br>
<nobr>while (!(line = in.readLine()).isEmpty()) {</nobr><br>
<nobr>String[] parts = line.split(": ", 2);</nobr><br>
<nobr>if (parts.length == 2) {</nobr><br>
<nobr>headers.put(parts[0].trim(), parts[1].trim());</nobr><br>
<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr>return headers;</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>public static void main(String[] args) {</nobr><br>
<nobr>SimpleHTTPServer server = new SimpleHTTPServer(8080);</nobr><br>
<nobr>server.start();</nobr><br>
<nobr>}</nobr><br>
<nobr>}</nobr><br>
<nobr>'</font>,10,4,2,-1</nobr><br>
</p></td></tr></table></center></body>

//lab21
<table style=display:block align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
46<br>
47<br>
48<br>
49<br>
50<br>
51<br>
52<br>
53<br>
54<br>
55<br>
56<br>
57<br>
58<br>
59<br>
60<br>
61<br>
62<br>
63<br>
64<br>
65<br>
66<br>
67<br>
68<br>
69<br>
70<br>
72<br>
73<br>
75<br>
76<br>
77<br>
78<br>
79<br>
80<br>
81<br>
82<br>
83<br>
85<br>
86<br>
88<br>
89<br>
90<br>
91<br>
92<br>
93<br>
94<br>
95<br>
96<br>
97<br>
98<br>
99<br>
100<br>
101<br>
102<br>
103<br>
104<br>
105<br>
106<br>
107<br>
109<br>
110<br>
111<br>
112<br>
113<br>
114<br>
115<br>
116<br>
117<br>
118<br>
119<br>
120<br>
121<br>
122<br>
123<br>
124<br>
125<br>
126<br>
127<br>
128<br>
129<br>
130<br>
131<br>
132<br>
</p></td><td  align=left valign=top><p><nobr><b>package</b> Sourse;</nobr><br>
<nobr></nobr><br>
<nobr><b>import</b> java.io.DataInputStream;</nobr><br>
<nobr><b>import</b> java.io.DataOutputStream;</nobr><br>
<nobr><b>import</b> java.net.ServerSocket;</nobr><br>
<nobr><b>import</b> java.net.Socket;</nobr><br>
<nobr><b>import</b> java.util.HashMap;</nobr><br>
<nobr><b>import</b> java.util.Map;</nobr><br>
<nobr><b>import</b> java.util.Set;</nobr><br>
<nobr><b>import</b> java.util.concurrent.ExecutorService;</nobr><br>
<nobr><b>import</b> java.util.concurrent.Executors;</nobr><br>
<nobr></nobr><br>
<nobr><b>public</b> <b>class</b> GogameServer</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> Map&lt;String, Set&lt;Integer&gt;&gt; stones = <b>new</b> HashMap&lt;&gt;();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>class</b> Worker <b>implements</b> Runnable</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>private</b> Socket socket;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> Worker(Socket s)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket = s;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>final</b> <b>int</b> N = 19;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>@Override</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> run()</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataInputStream d = <b>new</b> DataInputStream(socket.getInputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>String ip = socket.getInetAddress().toString();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Set&lt;Integer&gt; coordinates = stones.get(ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> r = d.readInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> c = d.readInt();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (coordinates == null)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>throw</b> <b>new</b> RuntimeException(<font color=red>"Coordinates&nbsp;set&nbsp;is&nbsp;null&nbsp;for&nbsp;IP:&nbsp;"</font>+ ip);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>coordinates.add(r * 100 + c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> distance = 2 * N;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>int</b> minr = 0, minc = 0;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int row = 0; row &lt; N; row++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (int col = 0; col &lt; N; col++)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (coordinates.contains(row * 100 + col))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>continue;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>double</b> dist = Math.sqrt((col - c) * (col - c) + (row - r) * (row - r));</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (dist &lt; distance)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>distance = dist;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>minr = row;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>minc = col;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>coordinates.add(minr * 100 + minc);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>socket.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Thread.sleep(1000);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>sendnum(ip, minr, minc);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> <b>static</b> <b>final</b> <b>int</b> port = 2311;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>protected</b> <b>void</b> sendnum(String ip, <b>int</b> r, <b>int</b> c)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> Thread(() -&gt;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket s = <b>new</b> Socket(ip, port);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>DataOutputStream o = <b>new</b> DataOutputStream(s.getOutputStream());</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>o.writeInt(r);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>o.writeInt(c);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>s.close();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>).start();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>private</b> ExecutorService pool = Executors.newFixedThreadPool(10);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>void</b> receive()</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>try</b> (ServerSocket ss = <b>new</b> ServerSocket(port))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>while</b> (true)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Socket s = ss.accept();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>Worker w = <b>new</b> Worker(s);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>pool.execute(w);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>catch</b> (Exception e)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>e.printStackTrace();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>public</b> <b>static</b> <b>void</b> main(String[] args)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>new</b> GogameServer().receive();</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
<nobr>}</nobr><br>
</p></td></tr></table></center></body>